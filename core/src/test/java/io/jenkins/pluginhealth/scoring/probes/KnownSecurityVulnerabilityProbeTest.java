/*
 * MIT License
 *
 * Copyright (c) 2023-2025 Jenkins Infra
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package io.jenkins.pluginhealth.scoring.probes;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

import java.time.ZonedDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import io.jenkins.pluginhealth.scoring.model.ProbeResult;
import io.jenkins.pluginhealth.scoring.model.updatecenter.Plugin;
import io.jenkins.pluginhealth.scoring.model.updatecenter.SecurityWarning;
import io.jenkins.pluginhealth.scoring.model.updatecenter.SecurityWarningVersion;
import io.jenkins.pluginhealth.scoring.model.updatecenter.UpdateCenter;

import hudson.util.VersionNumber;
import org.junit.jupiter.api.Test;

class KnownSecurityVulnerabilityProbeTest extends AbstractProbeTest<KnownSecurityVulnerabilityProbe> {
    @Override
    KnownSecurityVulnerabilityProbe getSpy() {
        return spy(KnownSecurityVulnerabilityProbe.class);
    }

    @Test
    void shouldNotRequireNewRelease() {
        assertThat(getSpy().requiresRelease()).isFalse();
    }

    @Test
    void shouldBeOKWithNoSecurityWarning() {
        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(Collections.emptyMap(), Collections.emptyMap(), Collections.emptyList()));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY, "No known security vulnerabilities.", probe.getVersion()));
    }

    @Test
    void shouldBeOKWithWarningOnDifferentPlugin() {
        final String pluginName = "foo-bar";
        final VersionNumber pluginVersion = new VersionNumber("1.0");
        final var pluginInUC = new Plugin(
                pluginName, pluginVersion, "scm", ZonedDateTime.now().minusHours(1), List.of(), 0, "", "main");
        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Map.of(pluginName, pluginInUC),
                        Collections.emptyMap(),
                        List.of(new SecurityWarning(
                                "SECURITY-1",
                                "wiz",
                                "http://link-to-issue",
                                List.of(new SecurityWarningVersion(null, ".*"))))));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY, "No known security vulnerabilities.", probe.getVersion()));
    }

    @Test
    void shouldBeOKWithWarningOnOlderVersion() {
        final String pluginName = "foo-bar";
        final VersionNumber pluginVersion = new VersionNumber("1.1");

        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Collections.emptyMap(),
                        Collections.emptyMap(),
                        List.of(new SecurityWarning(
                                "SECURITY-1",
                                pluginName,
                                "http://link-to-issue",
                                List.of(new SecurityWarningVersion(new VersionNumber("1.0"), "0\\.*"))))));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY, "No known security vulnerabilities.", probe.getVersion()));
    }

    @Test
    void shouldNotBeOKWithWarningOnCurrentVersion() {
        final String pluginName = "foo-bar";
        final VersionNumber pluginVersion = new VersionNumber("1.1");
        final String warningId = "SECURITY-1";
        final String url = "http://link-to-issue";

        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Collections.emptyMap(),
                        Collections.emptyMap(),
                        List.of(new SecurityWarning(
                                warningId,
                                pluginName,
                                url,
                                List.of(new SecurityWarningVersion(pluginVersion, "1.0"))))));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY, warningId + "|" + url, probe.getVersion()));
    }

    @Test
    void shouldNotBeOKWithWarningWithoutLastVersion() {
        final String pluginName = "foo-bar";
        final VersionNumber pluginVersion = new VersionNumber("1.1");
        final String warningId = "SECURITY-1";
        final String url = "http://link-to-issue";

        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Collections.emptyMap(),
                        Collections.emptyMap(),
                        List.of(new SecurityWarning(
                                warningId, pluginName, url, List.of(new SecurityWarningVersion(null, ".*"))))));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY, warningId + "|" + url, probe.getVersion()));
    }

    @Test
    void shouldNotBeOKWithMultipleWarningsWithoutLastVersion() {
        final String pluginName = "foo-bar";
        final VersionNumber pluginVersion = new VersionNumber("1.1");
        final String warningId1 = "SECURITY-1";
        final String warningId2 = "SECURITY-2";
        final String url1 = "http://link-to-issue";
        final String url2 = "https://link-to-other-issue";

        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Collections.emptyMap(),
                        Collections.emptyMap(),
                        List.of(
                                new SecurityWarning(
                                        warningId1, pluginName, url1, List.of(new SecurityWarningVersion(null, ".*"))),
                                new SecurityWarning(
                                        warningId2,
                                        pluginName,
                                        url2,
                                        List.of(new SecurityWarningVersion(null, ".*"))))));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY,
                        "%s, %s".formatted(warningId1 + "|" + url1, warningId2 + "|" + url2),
                        probe.getVersion()));
    }

    @Test
    void shouldNotBeOKWithWarningWithoutLastVersionAndOneResolved() {
        final String pluginName = "foo-bar-3";
        final VersionNumber pluginVersion = new VersionNumber("1.2");
        final String warningId1 = "SECURITY-1";
        final String warningId2 = "SECURITY-1";
        final String url1 = "http://link-to-issue";
        final String url2 = "https://link-to-other-issue";

        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Collections.emptyMap(),
                        Collections.emptyMap(),
                        List.of(
                                new SecurityWarning(
                                        warningId1, pluginName, url1, List.of(new SecurityWarningVersion(null, ".*"))),
                                new SecurityWarning(
                                        warningId2,
                                        pluginName,
                                        url2,
                                        List.of(new SecurityWarningVersion(new VersionNumber("1.1"), ".*"))))));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY,
                        warningId1 + "|" + url1 + ", " + warningId2 + "|" + url2,
                        probe.getVersion()));
    }

    @Test
    void repositoryConnectorShouldHaveSecurityIssues() {
        final String pluginName = "repository-connector";
        final VersionNumber pluginVersion = new VersionNumber("2.2.1");

        SecurityWarning sw1 = new SecurityWarning(
                "SECURITY-2665-1",
                pluginName,
                "https://www.jenkins.io/security/advisory/2022-07-27/#SECURITY-2665%20(1)",
                List.of(new SecurityWarningVersion(new VersionNumber("2.2.0"), ".*")));
        SecurityWarning sw2 = new SecurityWarning(
                "SECURITY-2665-2",
                pluginName,
                "https://www.jenkins.io/security/advisory/2022-07-27/#SECURITY-2665%20(2)",
                List.of(new SecurityWarningVersion(new VersionNumber("2.2.0"), ".*")));
        SecurityWarning sw3 = new SecurityWarning(
                "SECURITY-2784-repository-connector",
                pluginName,
                "https://www.jenkins.io/security/advisory/2022-06-22/#SECURITY-2784",
                List.of(new SecurityWarningVersion(new VersionNumber("2.2.0"), ".*")));
        SecurityWarning sw4 = new SecurityWarning(
                "SECURITY-2183",
                pluginName,
                "https://www.jenkins.io/security/advisory/2021-02-24/#SECURITY-2183",
                List.of(new SecurityWarningVersion(new VersionNumber("2.0.2"), "([01]|2[.]0[.][0-2])(|[.-].+)")));
        SecurityWarning sw5 = new SecurityWarning(
                "SECURITY-1520",
                pluginName,
                "https://jenkins.io/security/advisory/2020-03-09/#SECURITY-1520",
                List.of(new SecurityWarningVersion(new VersionNumber("1.3.1"), "([01])(|[.-].+)")));
        SecurityWarning sw6 = new SecurityWarning(
                "SECURITY-958",
                pluginName,
                "https://jenkins.io/security/advisory/2019-03-06/#SECURITY-958",
                List.of(new SecurityWarningVersion(new VersionNumber("1.2.4"), "(0|1[.]([01]|2[.][0-4]))(|[-.].*)")));

        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Collections.emptyMap(), Collections.emptyMap(), List.of(sw1, sw2, sw3, sw4, sw5, sw6)));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY,
                        sw1.id() + "|" + sw1.url() + ", " + sw2.id() + "|" + sw2.url() + ", " + sw3.id() + "|"
                                + sw3.url(),
                        probe.getVersion()));
    }

    @Test
    void ontrackShouldHaveSecurityIssues() {
        final String pluginName = "ontrack";
        final VersionNumber pluginVersion = new VersionNumber("4.1.2");

        SecurityWarning sw1 = new SecurityWarning(
                "SECURITY-495",
                pluginName,
                "https://jenkins.io/security/advisory/2017-04-10/",
                List.of(new SecurityWarningVersion(new VersionNumber("2.30.5"), "2\\.([0-2]\\d?|30)\\..*")));
        SecurityWarning sw2 = new SecurityWarning(
                "SECURITY-1341",
                pluginName,
                "https://jenkins.io/security/advisory/2019-04-17/#SECURITY-1341",
                List.of(new SecurityWarningVersion(new VersionNumber("3.4"), "(2|3[.]([0-3]))(|[.-].*)|3[.]4")));
        SecurityWarning sw3 = new SecurityWarning(
                "SECURITY-2784-ontrack",
                pluginName,
                "https://www.jenkins.io/security/advisory/2022-06-22/#SECURITY-2784",
                List.of(new SecurityWarningVersion(new VersionNumber("4.0.0"), ".*")));

        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(Collections.emptyMap(), Collections.emptyMap(), List.of(sw1, sw2, sw3)));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY, sw3.id() + "|" + sw3.url(), probe.getVersion()));
    }

    @Test
    void swarm349ShouldNotHaveSecurityAdvisory() {
        final String pluginName = "swarm";
        final VersionNumber pluginVersion = new VersionNumber("3.49");
        final String warningId = "SECURITY-597";
        final String url = "https://jenkins.io/security/advisory/2017-10-11/";
        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Collections.emptyMap(),
                        Collections.emptyMap(),
                        List.of(new SecurityWarning(
                                warningId,
                                pluginName,
                                url,
                                List.of(new SecurityWarningVersion(null, "([12][.].+|3[.][34])(|[.-].*)"))))));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY, "No known security vulnerabilities.", probe.getVersion()));
    }

    @Test
    void swarm35ShouldNotHaveSecurityAdvisory() {
        final String pluginName = "swarm";
        final VersionNumber pluginVersion = new VersionNumber("3.5");
        final String warningId = "SECURITY-597";
        final String url = "https://jenkins.io/security/advisory/2017-10-11/";
        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Collections.emptyMap(),
                        Collections.emptyMap(),
                        List.of(new SecurityWarning(
                                warningId,
                                pluginName,
                                url,
                                List.of(new SecurityWarningVersion(null, "([12][.].+|3[.][34])(|[.-].*)"))))));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY, "No known security vulnerabilities.", probe.getVersion()));
    }

    @Test
    void swarm34ShouldHaveSecurityAdvisory() {
        final String pluginName = "swarm";
        final VersionNumber pluginVersion = new VersionNumber("3.4");
        final String warningId = "SECURITY-597";
        final String url = "https://jenkins.io/security/advisory/2017-10-11/";
        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Collections.emptyMap(),
                        Collections.emptyMap(),
                        List.of(new SecurityWarning(
                                warningId,
                                pluginName,
                                url,
                                List.of(new SecurityWarningVersion(null, "([12][.].+|3[.][34])(|[.-].*)"))))));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY, warningId + "|" + url, probe.getVersion()));
    }

    @Test
    void shouldBeOKWithWarningWithoutLastVersionButOutOfPattern() {
        final String pluginName = "foo-bar";
        final VersionNumber pluginVersion = new VersionNumber("2.0");

        final var plugin = mock(io.jenkins.pluginhealth.scoring.model.Plugin.class);
        final ProbeContext ctx = mock(ProbeContext.class);
        final KnownSecurityVulnerabilityProbe probe = getSpy();

        when(plugin.getName()).thenReturn(pluginName);
        when(plugin.getVersion()).thenReturn(pluginVersion);
        when(ctx.getUpdateCenter())
                .thenReturn(new UpdateCenter(
                        Collections.emptyMap(),
                        Collections.emptyMap(),
                        List.of(new SecurityWarning(
                                "SECURITY-1",
                                pluginName,
                                "http://link-to-issue",
                                List.of(new SecurityWarningVersion(null, "[0-1]\\..*"))))));

        final ProbeResult result = probe.apply(plugin, ctx);
        assertThat(result)
                .isNotNull()
                .usingRecursiveComparison()
                .comparingOnlyFields("id", "status", "message")
                .isEqualTo(ProbeResult.success(
                        KnownSecurityVulnerabilityProbe.KEY, "No known security vulnerabilities.", probe.getVersion()));
    }
}
