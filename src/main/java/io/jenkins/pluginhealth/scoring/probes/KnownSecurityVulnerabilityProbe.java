/*
 * MIT License
 *
 * Copyright (c) 2022 Jenkins Infra
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package io.jenkins.pluginhealth.scoring.probes;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import io.jenkins.pluginhealth.scoring.model.Plugin;
import io.jenkins.pluginhealth.scoring.model.ProbeResult;
import io.jenkins.pluginhealth.scoring.model.updatecenter.SecurityWarning;

import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

@Component
@Order(value = KnownSecurityVulnerabilityProbe.ORDER)
public class KnownSecurityVulnerabilityProbe extends Probe {
    public static final int ORDER = UpForAdoptionProbe.ORDER + 1;
    public static final String KEY = "security";

    @Override
    protected ProbeResult doApply(Plugin plugin, ProbeContext context) {
        final List<SecurityWarning> warnings = context.getUpdateCenter().warnings();
        final String issues = warnings.stream()
            .filter(w -> w.name().equals(plugin.getName()))
            .filter(w -> w.versions().stream().anyMatch(securityWarningVersion -> {
                if (securityWarningVersion.lastVersion() != null) {
                    return plugin.getVersion().isOlderThanOrEqualTo(securityWarningVersion.lastVersion());
                }
                final Pattern pattern = Pattern.compile(securityWarningVersion.pattern());
                final Matcher matcher = pattern.matcher(plugin.getVersion().toString());
                return matcher.find();
            }))
            .map(SecurityWarning::id)
            .collect(Collectors.joining(", "));

        return !issues.isBlank() ?
            ProbeResult.failure(key(), issues) :
            ProbeResult.success(key(), "Plugin is OK");
    }

    @Override
    public String key() {
        return KEY;
    }

    @Override
    public String getDescription() {
        return "Detects if a given plugin has a public security vulnerability advertised in a security advisory.";
    }
}
